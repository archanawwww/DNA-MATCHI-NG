mport numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import torch
import torch.nn as nn
import torch.optim as optim
from Bio import SeqIO
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, GlobalMaxPooling1D, Dense, Embedding
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

disease_data = {
    "DNA": [
        "ATCGTGCATGCA", "GCTAGCTAGCTA", "TTGCGATCGTGA", "ACGTGCTAGCTA", "CGTACGTAGCTG",
        "TGCATGCTAGTC", "AGTCGATGCTAG", "GATCGTACGTAC", "CGTAGCTAGCTA", "TGCATGCATGCA"
    ],
    "Disease": [
        "Cancer", "Diabetes", "Alzheimer's", "Heart Disease", "Cancer",
        "Diabetes", "Alzheimer's", "Heart Disease", "Cancer", "Diabetes"
    ]
}


disease_df = pd.DataFrame(disease_data)


label_encoder = LabelEncoder()
disease_df['Disease'] = label_encoder.fit_transform(disease_df['Disease'])


def kmer_embedding(dna, k=3):
    return [''.join(dna[i:i+k]) for i in range(len(dna) - k + 1)]

def dna_to_kmer_vector(dna, k=3):
    kmer_vocab = {'A': 0, 'T': 1, 'C': 2, 'G': 3}
    kmers = kmer_embedding(dna, k)
    return [sum(kmer_vocab.get(base, 0) for base in kmer) for kmer in kmers]

X = np.array(disease_df['DNA'].apply(lambda x: dna_to_kmer_vector(str(x), k=3)).tolist())
y = disease_df['Disease']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


max_length = max(map(len, X_train))
X_train_padded = pad_sequences(X_train, maxlen=max_length, padding='post')
X_test_padded = pad_sequences(X_test, maxlen=max_length, padding='post')


def build_cnn_model(num_classes):
    model = Sequential([
        Embedding(input_dim=128, output_dim=64, input_length=max_length),
        Conv1D(filters=64, kernel_size=3, activation='relu'),
        GlobalMaxPooling1D(),
        Dense(32, activation='relu'),
        Dense(num_classes, activation='softmax')
    ])
    model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model

cnn_model = build_cnn_model(len(set(y)))
cnn_model.fit(X_train_padded, y_train, epochs=10, batch_size=16, validation_data=(X_test_padded, y_test))


plt.figure(figsize=(8, 5))
sns.countplot(x=label_encoder.inverse_transform(y), palette='coolwarm')
plt.title('Distribution of Genetic Diseases')
plt.xlabel('Disease')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()


def predict_disease(dna):
    dna_vector = dna_to_kmer_vector(dna, k=3)
    padded_vector = pad_sequences([dna_vector], maxlen=max_length, padding='post')
    pred = cnn_model.predict(padded_vector).argmax()
    return label_encoder.inverse_transform([pred])[0]


dna_sample = "GCTAGCTAGCTA"
print(f"ðŸ”¬ Predicted Disease: {predict_disease(dna_sample)}")
